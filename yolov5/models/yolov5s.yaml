# parameters
nc: 80  # number of classes
depth_multiple: 1.0  # model depth multiple
width_multiple: 1.0  # layer channel multiple
# 模型深度宽度控制通过修改以上两个参数作用于BottleneckCSP

# anchors
# 原始模型三个检测层对应三组初始化Anchor值。当输入图像尺寸为640X640时：
# P3/8 对应的检测层大小为80X80，可以用来检测8X8以上的目标。
# P4/16对应的检测层大小为40X40，可以用来检测16X16以上的目标。
# P5/32对应的检测层大小为20X20，可以用来检测32X32以上的目标。
anchors:
  - [5,6, 8,14, 15,11]  # add smaller anchor for the tiny object
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, BottleneckCSP, [128]], # 2 输出size相同的网络部分叫一级(stage)，选择每一级的最后一层特征图
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 9, BottleneckCSP, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, BottleneckCSP, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 1, SPP, [1024, [5, 9, 13]]],
   [-1, 3, BottleneckCSP, [1024, False]],  # 9
  ]

# YOLOv5 head
# 检测头包括了两个部分，即颈部和Prediction：
# 在颈部，主要利用类似FPN+PAN的方式对骨干网络提取到的特征进行多尺度融合处理，最后送入检测层。
# yolov3中，该阶段只用到了FPN融合，FPN是一种自顶向下传达强语义特征的网络，即一个正金字塔形结构，融合的特征图越来越小。
# yolov5中，除了使用FPN结构对特征进行融合，还使用到了PAN结构，PAN与FPN网络正好相反，是一个倒金字塔结构，自底向上传达强定位特征。
# 两者相互结合。
head:
  [[-1, 1, Conv, [512, 1, 1]],  #20*20
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], #40*40
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4  40*40
   [-1, 3, BottleneckCSP, [512, False]],  #13  40*40

   [-1, 1, Conv, [512, 1, 1]], #40*40
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3  80*80
   [-1, 3, BottleneckCSP, [512, False]],  #17  80*80

   [-1, 1, Conv, [256, 1, 1]], #18  80*80
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], #19  160*160  --> further upsampling for the tiny object
   [[-1, 2], 1, Concat, [1]], #20 cat backbone p2  160*160
   [-1, 3, BottleneckCSP, [256, False]], #21 (P2/4-tiny) 160*160

   [-1, 1, Conv, [256, 3, 2]],  #22  80*80
   [[-1, 18], 1, Concat, [1]], #23  80*80
   [-1, 3, BottleneckCSP, [256, False]], #24 (P3/8-small) 80*80

   [-1, 1, Conv, [256, 3, 2]], #25  40*40
   [[-1, 14], 1, Concat, [1]],  # 26  cat head P4  40*40
   [-1, 3, BottleneckCSP, [512, False]],  # 27 (P4/16-medium) 40*40

   [-1, 1, Conv, [512, 3, 2]],  #28  20*20
   [[-1, 10], 1, Concat, [1]],  #29 cat head P5  #20*20
   [-1, 3, BottleneckCSP, [1024, False]],  # 30 (P5/32-large)  20*20

   [[21, 24, 27, 30], 1, Detect, [nc, anchors]],  # Detect(p2, P3, P4, P5)
  ]
# 修改主要为：在第17层后，继续对特征图进行上采样处理，使特征图继续扩大，
# 同时在第20层时，将获取到的大小为160X160的特征图与骨干网络中第2层特征图concat，以此获取更大的特征图进行小目标检测。
# 在第31层，即检测层，增加小目标检测层，一共使用四层[22, 25, 28, 31]进行检测。
# 增加检测层后计算量增加，导致推理检测速度降低，不过对于小目标有很好的改善。
